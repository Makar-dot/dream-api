from fastapi import FastAPI
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import openai
import replicate
import os

load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")
os.environ["REPLICATE_API_TOKEN"] = os.getenv("REPLICATE_API_TOKEN")

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class DreamRequest(BaseModel):
    dream: str

class DreamResponse(BaseModel):
    interpretation: str
    video_url: str

@app.post("/dream", response_model=DreamResponse)
async def dream_endpoint(request: DreamRequest):
    print(f"üí§ –ü–æ–ª—É—á–µ–Ω —Å–æ–Ω: {request.dream}")

    # 1. –¢—Ä–∞–∫—Ç–æ–≤–∫–∞ —Å–Ω–∞ —á–µ—Ä–µ–∑ OpenAI
    try:
        print("üìò –ó–∞–ø—Ä–æ—Å –∫ OpenAI...")
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤ –ø–æ –ï–≤–≥–µ–Ω–∏—é –¶–≤–µ—Ç–∫–æ–≤—É. –î–∞–π —Ç—Ä–∞–∫—Ç–æ–≤–∫—É —Å–Ω–∞ –ø–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π —Ä—É—Å—Å–∫–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏ –¶–≤–µ—Ç–∫–æ–≤–∞. –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò."
                },
                {"role": "user", "content": request.dream}
            ],
            max_tokens=500
        )
        interpretation = response.choices[0].message.content.strip()
        print("‚úÖ –¢—Ä–∞–∫—Ç–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–∞")
    except Exception as e:
        print(f"‚ùå OpenAI –æ—à–∏–±–∫–∞: {e}")
        interpretation = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–∫—Ç–æ–≤–∫—É —Å–Ω–∞."

    # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Bytedance
    try:
        print("üé• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ bytedance/seedance-1-pro...")
        output = replicate.run(
            "bytedance/seedance-1-pro",
            input={
                "prompt": request.dream,
                "video_length": "5s",
                "resolution": "480p"
            }
        )
        video_url = output[0] if isinstance(output, list) and output else ""
        print(f"‚úÖ –í–∏–¥–µ–æ URL: {video_url}")
    except Exception as e:
        print(f"‚ùå Replicate –æ—à–∏–±–∫–∞: {e}")
        video_url = ""

    return DreamResponse(interpretation=interpretation, video_url=video_url)
