import os
import replicate
import openai
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# FastAPI
app = FastAPI()

# –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# –í—Ö–æ–¥–Ω–∞—è –º–æ–¥–µ–ª—å
class DreamRequest(BaseModel):
    dream: str

# –û—Ç–≤–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
class DreamResponse(BaseModel):
    interpretation: str
    video_url: str

@app.on_event("startup")
def check_env():
    if not REPLICATE_API_TOKEN or not OPENAI_API_KEY:
        print("‚ùå ENV ERROR: Missing REPLICATE_API_TOKEN or OPENAI_API_KEY")
    else:
        print("‚úÖ ENV OK: Tokens loaded")

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.post("/dream", response_model=DreamResponse)
async def interpret_dream(request: DreamRequest):
    try:
        # –¢—Ä–∞–∫—Ç–æ–≤–∫–∞ —Å–Ω–∞
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥-–∞–Ω–∞–ª–∏—Ç–∏–∫. –û–±—ä—è—Å–Ω–∏ —Å–æ–Ω –≥–ª—É–±–æ–∫–æ, –ø–æ –Æ–Ω–≥—É –∏ –§—Ä–µ–π–¥—É."},
                {"role": "user", "content": request.dream}
            ],
            max_tokens=500
        )
        interpretation = response.choices[0].message["content"].strip()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
        output = replicate.run(
            "cjwbw/video-to-video:8e24824b2c246b85bbfe05877e6caa69694491cbfb8b0f063f1fb681818e224d",
            input={"prompt": request.dream}
        )

        return DreamResponse(
            interpretation=interpretation,
            video_url=output
        )

    except Exception as e:
        print(f"‚ùå Error in /dream handler: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 10000))
    print("üî• Launching app on port", port)
    uvicorn.run("main:app", host="0.0.0.0", port=port)
